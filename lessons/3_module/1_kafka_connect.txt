- В распределенных системах применяется CAP-теорема, она утверждает, что система обладает тремя свойствами и можно
    выбрать только два из них.

- Свойства:
    - Согласованность (consistency) - на всех узлах системы одни и те же данные
    - Доступность (availability) - система всегда отвечает на запросы
    - Устойчивость к разделению сети (partition tolerance) - система продолжает работать, даже если потеряна связь между
        узлами

- Допустим у нас есть сервис авторизации и внешние клиенты, мы можем использовать Kafka для снятия нагрузки с сервиса
    авторизации: сервис авторизации отправляет свои данные в топики, а внешние сервисы читают не из сервиса авторизации,
    а из Kafka. В таком случае, используя Kafka, мы сознательно ослабляем требование строгой согласованности в пользу
    согласованности в конечном счете (eventual consistency). Данные могут быть временно в несогласованном состоянии, но
    в итоге будут согласованы

- Связать БД с Kafka - значит реализовать извлечение данных из внешних систем в Kafka и помещение данных из Kafka во
    внешние системы

- Связать БД с Kafka непростая задача, тк важно решить дополнительные задачи:
    - Обеспечение надежности системы - данные считанные с БД, но еще не помещенные в брокер не должны теряться
    - Обеспечение восстановления после сбоя - система должна начать читать данные с места сбоя
    - Учесть масштабирование - система должна поддерживать параллельную обработку

- Интегрировать БД с Kafka можно двумя способами:
    - Написать код, используя традиционные продюсеры и консьюмеры. Сложно, подвержено ошибкам, но позволяет тонко
        сконфигурировать систему
    - Использовать Kafka Connect - фреймворк для направления данных в/из Kafka

- Kafka Connect содержит готовые функции, которые помогают управлять настройками, хранить смещения, обрабатывать ошибки
    и распараллеливать обработку - по сути легко решать задачи надежности, восстановления и масштабирования

- Kafka Connect хранит статус коннектора, смещение и конфигурацию в специальных топиках
