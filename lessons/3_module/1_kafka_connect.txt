- В распределенных системах применяется CAP-теорема, она утверждает, что система обладает тремя свойствами и можно
    выбрать только два из них.

- Свойства:
    - Согласованность (consistency) - на всех узлах системы одни и те же данные
    - Доступность (availability) - система всегда отвечает на запросы
    - Устойчивость к разделению сети (partition tolerance) - система продолжает работать, даже если потеряна связь между
        узлами

- Допустим у нас есть сервис авторизации и внешние клиенты, мы можем использовать Kafka для снятия нагрузки с сервиса
    авторизации: сервис авторизации отправляет свои данные в топики, а внешние сервисы читают не из сервиса авторизации,
    а из Kafka. В таком случае, используя Kafka, мы сознательно ослабляем требование строгой согласованности в пользу
    согласованности в конечном счете (eventual consistency). Данные могут быть временно в несогласованном состоянии, но
    в итоге будут согласованы

- Связать БД с Kafka - значит реализовать извлечение данных из внешних систем в Kafka и помещение данных из Kafka во
    внешние системы

- Связать БД с Kafka непростая задача, тк важно решить дополнительные задачи:
    - Обеспечение надежности системы - данные считанные с БД, но еще не помещенные в брокер не должны теряться
    - Обеспечение восстановления после сбоя - система должна начать читать данные с места сбоя
    - Учесть масштабирование - система должна поддерживать параллельную обработку

- Интегрировать БД с Kafka можно двумя способами:
    - Написать код, используя традиционные продюсеры и консьюмеры. Сложно, подвержено ошибкам, но позволяет тонко
        сконфигурировать систему
    - Использовать Kafka Connect - фреймворк для направления данных в/из Kafka

- Kafka Connect содержит готовые функции, которые помогают управлять настройками, хранить смещения, обрабатывать ошибки
    и распараллеливать обработку - по сути легко решать задачи надежности, восстановления и масштабирования

- Kafka Connect хранит статус коннектора, смещение и конфигурацию в специальных топиках

- Для подключения коннектора надо либо найти существующий, либо написать самом на java/scala

- Kafka Connect включает плагины и среду выполнения, которая запускает потоки данных и управляет ими

- Плагины это коннекторы или конвертеры

- Среда выполнения называется воркером

- Коннекторы выполняют задачи

- Коннекторы инкапсулируют всю логику взаимодействия и служат интерфейсом между внешними системами и воркером

- Коннектор обычно это jar-файл, реализующий API, но возможны и другие реализации, например плагины, загружаемые в
    контейнер или REST-сервис

- Типы коннекторов:
    - коннектор-источник (source connector) - загружает данные из источника (например БД) и передает обновления в топики
    - коннектор-приемник (sink connector) - передает данные из топика Kafka во внешнюю систему

- Коннекторы могут еще преобразовывать данные.

- Трансформация данных - это функция, которая принимает одну запись и отдает измененную

- Трансформации можно объединить в цепочку в конфигурации коннектора

- Конвертеры обеспечивают совместимость форматов для записи в Kafka и чтении из него в рамках Kafka Connect. Преобразуют
    данные из байтов в формат Kafka Connect и обратно

- Типы конвертеров:
    - Конвертер ключей и значений (key/value converter) - преобразует ключи и значения, например в json, avro
    - Конвертер заголовков (header converter) - преобразует заголовки

- Конвертеры данных автономны, не связаны с коннекторами

- Любые коннекторы могут использовать любые конвертеры

- Для дополнительного чтения:
    https://docs.confluent.io/platform/current/connect/userguide.html#configuring-key-and-value-converters
    https://docs.confluent.io/platform/current/schema-registry/connect.html#schemaregistry-kafka-connect

- Воркер в Kafka Connect - экземпляр процесса, выполняющий работу по обмену данными между Kafka и внешними системами

- Есть два режима работы воркера:
    - автономный (standalone) - запускается 1 воркер, который хранит свое состояние непосредственно в файловой системе
    - распределенный (distributed) - может быть 1 или несколько воркеров, каждый воркер работает независимо и
        координирует свою работу с другими для распределения нагрузки. Состояния воркеров хранятся в топиках

- Задачи (tasks) в Kafka Connect - еденица работы, экзеспляр коннектора, который выполняет конкретную работу по обмену,
    каждая задача обрабатывает определенный объем данных. Например, если коннектор настроен на извлечение данных из БД,
    то каждая задача может обрабатывать заданный диапазон записей и таблиц

- Количество задач зависит от настроек коннектора и параметра tasks.max

- Перебалансировка задач - перераспределение задач воркерами между собой, происходит когда коннектор впервые
    подключается к Kafka, когда изменяется количество задач, когда меняется количество воркеров и когда меняется
    конфигурация коннектора

- Если задача завершилась с ошибкой, то она не будет перезапущена автоматически, надо перезапускать вручную через API

- Коннектор извлекает и записывает данные во внешние сервисы
- Задача перемещает данные
- Воркер состоит из коннекторов и задач
- Конвертер преобразует данные между форматами
- Преобразователь позволяет изменять данные во время их передачи.
