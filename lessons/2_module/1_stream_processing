- Потоковая обработка (Stream Processing) - обработка данных по мере того, как они поступают (в реальном времени)

- Отличия потоковой обработки и пакетной:
    - Время обработки:
        - Пакетная - по расписанию (например ежедневно)
        - Потоковая - в режиме реального времени
    - Задержка:
        - Пакетная - высокая, отложенная
        - Потоковая - низкая, минимальная
    - Подходит для задач:
        - Пакетная - аналитика, отчеты, агрегирование данных
        - Потоковая - реагирование на события, мониторинг
    - Примеры применения:
        - Пакетная - финансовые отчеты, архивные данные
        - Потоковая - аналитика кликов, отслеживание позиций
    - Итог:
        - Пакетная - для обработки крупных объемов данных с допустимой задержкой
        - Потоковая - для оперативной обработки и реакции на данные

- Для потоковой обработки в Kafka имеется два инструмента:
    - Kafka Streams
    - KSQL

- Kafka Streams - клиентское приложение для построения приложений на базе Kafka. Позволяет писать приложения на Java и
    Scala, которые могут читать из Kafka, обрабатывать из и записывать обратно

- Общий процесс - producer отправляет данные в Kafka Cluster, который содержит топики. Эти топики выступают в роли
    каналов. Kafka Streams получает потоки (Streams) из этих топиков, обрабатывает, применяя потоковые операции, такие
    как фильтрация, агрегация и объединение данных. После обработки результат возвращается обратно в Kafka, откуда
    его может забрать consumer

                | Kafka Cluster |    | Kafka Streams |
    Producer -> |  topic 1      | -> |               |
             -> |  topic 2      | -> |               |
                |               |    |               |
    Consumer <- |  topic n      | <- |               |

- Преимущества Kafka Streams:
    - Интеграция с приложением - реализация потоковой обработки на стороне Java/Scala приложения
    - Высокая производительность - позволяет обрабатывать большие объемы с низкой задержкой
    - Stateful обработка - поддерживает сложные операции с сохранением состояния (например, агрегирование и соединение
        потоков)
    - Масштабируемость и отказоустойчивость - автоматически масштабируется, обеспечивая высокую доступность без
        дополнительных настроек, данные могут быть восстановлены при системных сбоях

- Faust - python-библиотека для потоковой обработки данных. Имеет много архитектурных сходств с Kafka Streams

- App - центральный объект в Faust, представляющий собой интерфейс для потоковой обработки. Тут настраивается
    подключение к Kafka, определяются задачи обработки и конфиг приложения

- Agent - асинхронная функция, обеспечивающая все трансформации данных из топика. В реальном времени он обрабатывает все
    элементы потока, применяя к данным все операции. Ключевой элемент Faust, аналог Stream Processor в Kafka Streams

- Stream - поток записей, представляющий последовательность событий. Аналог KStream в Kafka Stream

- Table - таблица состояний, хранящая текущее состояние данных (последние данные для каждого ключа) с возможностью
    обновления. Аналог KTable в Kafka Streams

- Serializer/Deserializer - компоненты, отвечающие за преобразование данных в байтовый формат и обратно

- KSQL - интерфейс, позволяющий выполнять потоковую обработку данных с помощью SQL-подобных запросов

- KSQLDB - система потоковой обработки событий, основанная на архитектура клиент-сервер, взаимодействует с данными в
    топиках через SQL-подобный интерфейс

- KSQLDB позволяет:
    - Запросы получения данных на конкретный момент времени
    - Объединять управление данными из разных источников

- KSQLDB позволяет с помощью SQL работать как с потоками событий, так и состоянием объектов

- KSQLDB позволяет интегрировать множество источников данных (БД, файловые системы и другие системы обработки данных), в
    качестве потребителей поддерживает не только Kafka, но и пользовательские сервисы, что дает гибкость в обработке и
    анализе данных в реальном времени
