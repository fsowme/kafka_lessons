- Плюсы KSQL и ksqlDB
    - Простота в использовании (достаточно знания SQL)
    - Быстрое прототипирование
    - Интерактивность (можно выполнять запросы в реальном времени и сразу видеть результаты)
    - Интеграция с экосистемой Kafka (совместимость с Kafka и Kafka Streams)

- Минусы KSQL и ksqlDB
    - Меньшая гибкость (SQL)
    - Меньшая производительность (абстракция над Kafka Streams)

- Пример KSQL
    CREATE TABLE item_counts AS
    SELECT item, SUM(quantity) AS total_quantity
    FROM shopping_cart
    GROUP BY item;

- Ключевые компоненты ksqlDB
    - Engine - ядро ksqlDB, выполняет потоковые операции и поддерживает stateful processing. Обрабатывает SQL-запросы и
        автоматически создает приложения на серверах
    - RESP API - интерфейс для доступа к функционалу через разные клиенты. Можно выполнять запросы, получать метрики и
        управлять состоянием потоков
    - CLI - консоль для разработки приложений и взаимодействия с ними
    - Kafka-UI - веб-интерфейс, упрощающий взаимодействие с Kafka

- Схема компонентов lessons/2_module/ksqlDB-scheme.png

- При выполнении запросов ksqlDB компилирует из в физический план, который работает как служба, реагируя на новые
    данные. Это позволяет эффективно распределять нагрузку и обрабатывать данные параллельно

- Потоки в KSQL - непрерывно поступающие сообщения из топиков Kafka, используются для обработки данных в реальном
    времени

- Создание потока в KSQL
    - Создать поток на основе топика - поток создается на основе существующих данных в топике Kafka
    - Определить схему данных - указывается типы ключей и значений и формат сообщений (avro, json, строка)

- Пример запроса на создание потока
    CREATE STREAM some_stream (     -- создание потока с именем some_stream
        user_id VARCHAR,             -- схема данные
        page_id VARCHAR,
        timestamp BIGINT
    ) WITH (
        KAFKA_TOPIC='some_topic',   -- имя топика Kafka
        VALUE_FORMAT='JSON',        -- формат данных
        partitions=1                -- число партиций потока (по-умолчанию 1)
    );

- CREATE STREAM - создание потока, который обрабатывает данные в реальном времени

- SELECT * FROM some_stream EMIT CHANGES - показывает текущие данные в потоке и их изменения по мере поступления новых

- CREATE TABLE - создание таблицы, которая реагирует на данные и хранит текущее состояние для каждого ключа

- INSERT INTO some_stream SELECT * FROM another_stream - копирует данные из одного потока в другой

- Фильтрация данные в потоке
    CREAT STREAM some_filtered_stream AS    -- создаем новый поток на основе существующего
    SELECT *                                -- выбираем все поля
    FROM input_stream
    WHERE value LIKE '@gmail.com'           -- фильтруем данные
    EMIT CHANGES;                           -- обеспечиваем постоянное обновление потока
