- kafka-topics.sh - позволяет выполнять большинство операций с топиками
- Создание топика
    kafka-topics.sh --bootstrap-server localhost:9092 --topic some --create --partitions 3 --replication-factor 2

- Список топиков
    kafka-topics.sh --bootstrap-server localhost:9092 --list

- Информация о топике
    kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic some
    - Пример вывода
        Topic: some  TopicId: dWAwR8flSt2oJUhJN9ozdg PartitionCount: 3       ReplicationFactor: 2    Configs:
            Topic: mytopic  Partition: 0    Leader: 1       Replicas: 1,2   Isr: 1,2
            Topic: mytopic  Partition: 1    Leader: 2       Replicas: 2,0   Isr: 2,0
            Topic: mytopic  Partition: 2    Leader: 0       Replicas: 0,1   Isr: 0,1
        - Topic - имя топика
        - TopicId - уникальный id топика для его идентификации в системе
        - PartitionCount - количество партиций
        - ReplicationFactor - фактор репликации, сколько копий каждой партиции будет в кластере
        - Configs - разные настройки кластера, могут включать различные параметры, в данном случае не указаны
        - Далее описание каждой партиции:
            - Topic - имя топика
            - Parittion - номер партиции
            - Leader - id брокера-лидера для партиции
            - Replicas - список id брокеров, которые хранят реплики партиции
            - Isr - список id реплик, которые находятся в синхронизированном состоянии - имеют актуальные данные и
                могут учавствовать в выборе лидера

- Добавление партиций
    kafka-topics.sh --bootstrap-server localhost:9092 --alter --topic some --partitions 8

- Добавление партиций в топики с ключами в сообщениях может быть сложным, тк соответствие ключей и партиций изменяется
    при измененеии числа партиций

- Удаление партиций невозможно, тк это приведет к потере данные и несогласованности, а перераспределение данных по
    оставшимся партициям также может нарушить порядок сообщений. Если необходимо уменьшить количество разделов:
    - Удаление топика и создание заного
    - Создание просто новой версии топика

- Удаление топика необратимая операция, приводит к удалению всех данных в нем. Рекомендуется удалять не больше
    одного-двух топиков одновременно и давать им время на завершение, особенно в больших кластерах, где это занимает
    много времени
    kafka-topics.sh --bootstrap-sercer localhost:9092 --delete --topic some

- Еще флаги kafka-topics.sh
    --unavailable-partitions - партиции у которых лидер недоступен
    --under-min-isr-partitions - партиции с количеством реплик меньше минимального
    --under-replicated-partitions - партиции с недостаточным количеством реплик

- Когда брокер теряет связь с остальным кластером лидерство передается другому брокеру, а первоначальная не становится
    автоматически ведущей для каких-либо партиций. Это может привести к неэффективной балансировке, если не включено
    автоматическое переназначение лидеров. Стоит подумать о включении этого параметра или использовать другие
    инструменты, такие как Cruise Control, для поддержания хорошего баланса

- Если кластер Kafka плохо сбалансирован, то можно выполнить лёгкую, обычно не оказывающую влияния процедуру - выбор
    предпочтительного лидера. Она заставляет контроллер кластера выбирать "идеальные" ведущие реплики для партиций, а
    клиенты перейдут к новому лидеру. Операция запускается с помощью kafka-leader-election.sh

- Запустить выбор предпочтительного лидера для всех топиков можно так
    kafka-leader-election.sh --bootstrap-server localhost:9092 --election-type PREFERRED --all-topic-partitions

- Для конкрутного топика
    kafka-leader-election.sh --bootstrap-server localhost:9092 --election-type PREFERRED --topic some

- Периодически возникает необходимость вручную назначить реплики для раздела
    - Существует неравномерная нагрузка на брокеров, которую автоматическое распределение лидеров обрабатывает
        неправильно
    - Один из брокеров отключился и раздел недостаточно реплицирован
    - Был добавлен новый брокер и нужно быстрее сбалансировать новые разделы в нём
    - Надо настроить коэффициент репликации топика

- Для ручного назначения реплик есть утилита kafka-reassign-partitions.sh - это многоэтапный процесс создания набора
    перемещений и последующего выполнения в соответствии с набором.
    - Сначала на основе списка брокеров и топиков генерируется предложение для набора перемещений - для этого нужно
        создать json-файл со списком топиков, которые надо перебалансировать
    - Затем происходит перемещение, сгенерированные на предыдущем шаге
    - Инструмент можно использовать вместе с созданным списком для отслеживания и проверки хода или завершения
        переназначений разделов

- Пример предложения для 4 брокеров в файле reassignment.json

- Запуск команды для создания плана переназначения
    kafka-reassign-partitions.sh \
        --bootstrap-server localhost:9092 \
        --broker-list "1,2,3,4" \
        --topics-to-move-json-file "/tmp/reassignment.json" \
        --generate

- Запуск план можно так
    kafka-reassign-partitions.sh \
        --botstrap-server localhost:9092 \
        --reassignment-json-file /tmp/reassignment.json \
        --execute
