- kafka-topics.sh - позволяет выполнять большинство операций с топиками
- Создание топика
    kafka-topics.sh --bootstrap-server localhost:9092 --topic some --create --partitions 3 --replication-factor 2

- Список топиков
    kafka-topics.sh --bootstrap-server localhost:9092 --list

- Информация о топике
    kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic some
    - Пример вывода
        Topic: some  TopicId: dWAwR8flSt2oJUhJN9ozdg PartitionCount: 3       ReplicationFactor: 2    Configs:
            Topic: mytopic  Partition: 0    Leader: 1       Replicas: 1,2   Isr: 1,2
            Topic: mytopic  Partition: 1    Leader: 2       Replicas: 2,0   Isr: 2,0
            Topic: mytopic  Partition: 2    Leader: 0       Replicas: 0,1   Isr: 0,1
        - Topic - имя топика
        - TopicId - уникальный id топика для его идентификации в системе
        - PartitionCount - количество партиций
        - ReplicationFactor - фактор репликации, сколько копий каждой партиции будет в кластере
        - Configs - разные настройки кластера, могут включать различные параметры, в данном случае не указаны
        - Далее описание каждой партиции:
            - Topic - имя топика
            - Parittion - номер партиции
            - Leader - id брокера-лидера для партиции
            - Replicas - список id брокеров, которые хранят реплики партиции
            - Isr - список id реплик, которые находятся в синхронизированном состоянии - имеют актуальные данные и
                могут учавствовать в выборе лидера

- Добавление партиций
    kafka-topics.sh --bootstrap-server localhost:9092 --alter --topic some --partitions 8

- Добавление партиций в топики с ключами в сообщениях может быть сложным, тк соответствие ключей и партиций изменяется
    при измененеии числа партиций

- Удаление партиций невозможно, тк это приведет к потере данные и несогласованности, а перераспределение данных по
    оставшимся партициям также может нарушить порядок сообщений. Если необходимо уменьшить количество разделов:
    - Удаление топика и создание заного
    - Создание просто новой версии топика

- Удаление топика необратимая операция, приводит к удалению всех данных в нем. Рекомендуется удалять не больше
    одного-двух топиков одновременно и давать им время на завершение, особенно в больших кластерах, где это занимает
    много времени
    kafka-topics.sh --bootstrap-sercer localhost:9092 --delete --topic some

- Еще флаги kafka-topics.sh
    --unavailable-partitions - партиции у которых лидер недоступен
    --under-min-isr-partitions - партиции с количеством реплик меньше минимального
    --under-replicated-partitions - партиции с недостаточным количеством реплик

- Когда брокер теряет связь с остальным кластером лидерство передается другому брокеру, а первоначальная не становится
    автоматически ведущей для каких-либо партиций. Это может привести к неэффективной балансировке, если не включено
    автоматическое переназначение лидеров. Стоит подумать о включении этого параметра или использовать другие
    инструменты, такие как Cruise Control, для поддержания хорошего баланса

- Если кластер Kafka плохо сбалансирован, то можно выполнить лёгкую, обычно не оказывающую влияния процедуру - выбор
    предпочтительного лидера. Она заставляет контроллер кластера выбирать "идеальные" ведущие реплики для партиций, а
    клиенты перейдут к новому лидеру. Операция запускается с помощью kafka-leader-election.sh

- Запустить выбор предпочтительного лидера для всех топиков можно так
    kafka-leader-election.sh --bootstrap-server localhost:9092 --election-type PREFERRED --all-topic-partitions

- Для конкрутного топика
    kafka-leader-election.sh --bootstrap-server localhost:9092 --election-type PREFERRED --topic some

- Периодически возникает необходимость вручную назначить реплики для раздела
    - Существует неравномерная нагрузка на брокеров, которую автоматическое распределение лидеров обрабатывает
        неправильно
    - Один из брокеров отключился и раздел недостаточно реплицирован
    - Был добавлен новый брокер и нужно быстрее сбалансировать новые разделы в нём
    - Надо настроить коэффициент репликации топика

- Для ручного назначения реплик есть утилита kafka-reassign-partitions.sh - это многоэтапный процесс создания набора
    перемещений и последующего выполнения в соответствии с набором.
    - Сначала на основе списка брокеров и топиков генерируется предложение для набора перемещений - для этого нужно
        создать json-файл со списком топиков, которые надо перебалансировать
    - Затем происходит перемещение, сгенерированные на предыдущем шаге
    - Инструмент можно использовать вместе с созданным списком для отслеживания и проверки хода или завершения
        переназначений разделов

- Пример предложения для 4 брокеров в файле reassignment.json

- Запуск команды для создания плана переназначения
    kafka-reassign-partitions.sh \
        --bootstrap-server localhost:9092 \
        --broker-list "1,2,3,4" \
        --topics-to-move-json-file "/tmp/reassignment.json" \
        --generate

- Запуск план можно так
    kafka-reassign-partitions.sh \
        --botstrap-server localhost:9092 \
        --reassignment-json-file /tmp/reassignment.json \
        --execute

- Группы потребителей управляются с помощью kafka-consumer-groups.sh

- Список активных консьюмеров
    kafka-consumer-groups.sh --bootstrap-server localhost:9092 --list

- Для потребления и генерации сообщений можно использовать kafka-console-consumer.sh и kafka-console-producer.sh

- Пример подписки на отдельный топик
    kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic some --group some-consumer

- Дополнительные флаги
    --formatter CLASSNAME - класс форматирования вывода сообщений
    --from-beginning - указывает потреблять сообщения из топика/топиков начиная с первого смещения, без флага
        потребление начинается с последнего смещения
    --max-messages NUM - ограничивает поребление сообщений до NUM, после чего работа завершается
    --partition NUM - читает только из партиции с номером NUM (требуется новый потребитель)

- Запуск продюсера - по умолчанию сообщения разделяются переносом строки, а табуляцией разделяются ключ и значение
    kafka-console-producer.sh --broker-list host-A:9092,host-B:9093 --topic some

- Удаление группы консьюмеров (все потребители должны перестать работать перед удалением, иначе будет ошибка)
    kafka-consumer-groups.sh --bootstrap-server localhost:9092 --delete --group some

- Наиболее распространённые ошибки
    - Ошибка недоступности брокера (Broker Not Available) - возникает, когда продюсер или консьюмер не может
        установить соединение с недоступным брокером. Можно проверить запущен-ли брокер ps -ef | grep kafka

    - Ошибка недоступности лидера (Leader Not Available) - лидер для раздела недоступен, что может указывать на сбой
        брокера. Нужно убедиться, что брокер перезапущен и присоединён к кластеру. Если лидер не переназначен
        автоматически, то можно инициировать выборы (kafka-topics.sh --alter --partitions)

    - Ошибка смещения вне разрешенного диапазона (Offset Out of Range) - консьюмер пытается прочитать данные из
    несуществующего смещения. Нужно сбросить смещение консьюмера на самое раннее или самое позднее из доступных:
        kafka-consumer-groups.sh --bootstrap-server localhost:9092 \
            --group consumer \
            --reset-offsets \
            --to-earliest \
            --execute \
            --topic some

    - Ошибка истечения времени запроса (Request Timed Out) - время запроса превышает установленный таймаут. Можно
        провести анализ задержки в сети и нагрузки на брокер, увеличить таймауты, оптимизировать размер сообщения

    - Неизвестный топик или раздел (Unknown Topic or Partition) - продюсер или консьюмер пытается получить доступ к
        несуществующему разделу или топику. Следует проверить правильность имен топиков и создать их при необходимости

    - Нет лидера для данного раздела (Not Leader For Partition) - брокер больше не является лидером для данного раздела,
        ошибка обычно временная. Если сохраняется можно проверить журнал брокера на наличие ошибок и рассмотреть
        возможность изменения параметра leader.imbalance.check.interval.seconds

    - Не удалось отправить (Failed to Send) - обычно вызвана сетевыми проблемами, сбоями брокера или неправильной
        конфигурацией клиента. Проверяется сетевое подключение и конфигурация продюсера, особенно параметры
        bootstrap.servers, acks и retries. Можно увеличить уровень журнала до DEBUG для диагностики

    - Брокер может быть недоступным (Broker May Not Be Available) - клиенты не могут связаться с брокером. Следует
        проверить запущен-ли брокер и доступен-ли он с клиентской машины

    - Слишком высокое значение фактора репликации (Replication Factor Too High) -  возникает при попытке создать топик с
        коэффициентом репликации, превышающим количество доступных брокеров. Можно уменьшить коэффициент репликации или
        добавить больше брокеров в кластер

    - Ошибка аутентификации (Failed Authentication) - неправильная настройка параметров безопасности Kafka. Можно
        проверить учетные данные клиента и убедиться, что конфигурация брокера соответствует настройкам клиента

    - Ошибка "невалидное сообщение" - связана с неверным форматом данных или значениями полей. Нужно управлять
        смещением, извлекая и сохраняя их в пакете для сброса значений смещений конкретного потребителя при
        возникновении проблем
